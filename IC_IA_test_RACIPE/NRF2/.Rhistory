d2 <- df %>% select(contains(y[2]), -contains(paste0(y[2], 0)))
d <- d1/d2
# d <- log(d)
pVec <- apply(d, 1, function(t){
p <- t.test(t-1)
p$p.value
})
mVec <- apply(d, 1, mean)
Frequency <- apply(d2, 1, mean)
plt <- ggplot() + geom_point(aes(x = mVec, y = log(pVec), color = Frequency), size = 2) +
geom_hline(yintercept = log(0.05), color = "red", size = 2)+ scale_color_viridis_c() +
labs(x = "Mean fold change", y = "log p-value") + theme_minimal() +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(paste0(x, paste0(y, collapse = "_"), "_volcano.svg"))
ggsave(paste0(x, paste0(y, collapse = "_"), "_volcano.pdf"))
})
setwd("..")
})
getwd()
setwd("..")
barsplots <- lapply(folz, function(x){#browser()
setwd(x)
df <- read.csv(paste0(x, "_summary.csv"))
df <- df[!str_detect(df$State, "NA"), ]
RACIPE100_cols <- colnames(df)[str_detect(colnames(df), "RACIPE_100")]
RACIPE1000_cols <- colnames(df)[str_detect(colnames(df), "RACIPE_1000")]
RACIPE100_cols <- RACIPE100_cols[!(RACIPE100_cols %in% RACIPE1000_cols)]
MAT100_cols <- colnames(df)[str_detect(colnames(df), "Matlab_100")]
MAT1000_cols <- colnames(df)[str_detect(colnames(df), "Matlab_1000")]
MAT100_cols <- MAT100_cols[!(MAT100_cols %in% MAT1000_cols)]
df <- df %>% mutate(
RACIPE100_Mean = df %>% select(RACIPE100_cols) %>% apply(1, mean),
RACIPE100_Sd = df %>% select(RACIPE100_cols) %>% apply(1, sd),
RACIPE1000_Mean = df %>% select(RACIPE1000_cols) %>% apply(1, mean),
RACIPE1000_Sd = df %>% select(RACIPE1000_cols) %>% apply(1, sd),
Matlab100_Mean = df %>% select(MAT100_cols) %>% apply(1, mean),
Matlab100_Sd = df %>% select(MAT100_cols) %>% apply(1, sd),
Matlab1000_Mean = df %>% select(MAT1000_cols) %>% apply(1, mean),
Matlab1000_Sd = df %>% select(MAT1000_cols) %>% apply(1, sd)
)
# df$St <- ifelse((length(df$State) > 30), (1:length(df$State)), df$State)
### barplot and heatmaps ----
if(nrow(df)>50)
{
df <- df[order(df$RACIPE100_Mean, decreasing = T), ]
df <- df[1:50,]
}
# browser()
df1 <- df %>% select(contains("Mean"), State) %>% gather(key = "Simulation", value = "Mean", -State)
df1$Simulation <- df1$Simulation %>% str_remove("_Mean")
df2 <- df %>% select(contains("Sd"), State) %>% gather(key = "Simulation", value = "Sd", -State)
df1$Sd <- df2$Sd
df1$St <- as.integer(df1$State)
State_code <- data.frame(State = as.character(df1$State), Code = as.integer(df1$State))
write.csv(State_code, paste0(x, "_State_reference.csv"), row.names = F)
p <- ggplot(df1, aes(x = reorder(St, -Mean), fill = Simulation, y = Mean)) +
geom_bar(position = position_dodge(), stat = "identity", colour = 'black') +
geom_errorbar(aes(ymin = Mean-Sd, ymax = Mean+Sd), width=.2,position=position_dodge(.9)) +
labs(x = "State", y = "Frequency") +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x, "_barplot.pdf"))
ggsave(filename = paste0(x, "_barplot.svg"))
print(p)
l <- unique(df1$Simulation)
for (i in 1:length(l))
{
for (j in (i+1):length(l))
{
p <- l[i]
q <- l[j]
d <- df1[df1$Simulation %in% c(p,q), ]
plt <- ggplot(d, aes(x = reorder(St, -Mean), fill = Simulation, y = Mean)) +
geom_bar(position = position_dodge(), stat = "identity", colour = 'black') +
geom_errorbar(aes(ymin = Mean-Sd, ymax = Mean+Sd), width=.2,position=position_dodge(.9)) +
labs(x = "State", y = "Frequency") +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x,p,q,"_barplot.pdf"))
ggsave(filename = paste0(x,p,q, "_barplot.svg"))
}
}
df$St <- as.integer(df$State)
p <- ggplot(df, aes(x = reorder(St, -RACIPE100_Mean), group = 1)) +
geom_line(aes(y = RACIPE100_Mean), colour = "Red") +
geom_errorbar(aes( ymin = RACIPE100_Mean - RACIPE100_Sd, ymax = RACIPE100_Mean + RACIPE100_Sd)) +
geom_line(aes(y = RACIPE1000_Mean), colour = "Red") +
geom_errorbar(aes( ymin = RACIPE1000_Mean - RACIPE1000_Sd, ymax = RACIPE1000_Mean + RACIPE1000_Sd)) +
geom_line(aes(y = Matlab100_Mean), colour = "Blue") +
geom_errorbar(aes(ymin = Matlab100_Mean - Matlab100_Sd, ymax = Matlab100_Mean + Matlab100_Sd)) +
geom_line(aes(y = Matlab1000_Mean), colour = "Green") +
geom_errorbar(aes(ymin = Matlab1000_Mean - Matlab1000_Sd, ymax = Matlab1000_Mean + Matlab1000_Sd)) +
labs(x = "State", y = "Frequency", title = x) + scale_x_log10() +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x, "_log_lineplot.pdf"), width = 4, height = 6)
ggsave(filename = paste0(x, "_log_lineplot.svg"), width = 4, height = 6)
print(p)
d1 <- df %>% select(RACIPE100_Mean, RACIPE1000_Mean, Matlab100_Mean, Matlab1000_Mean) %>%
t %>% JSD %>% data.frame %>% set_colnames(c("RACIPE100", "RACIPE1000", "Matlab100", "Matlab1000")) %>%
mutate(Simulation = c("RACIPE100", "RACIPE1000", "Matlab100", "Matlab1000")) %>%
gather(key = "Simulation_2", value = "JSD", -Simulation) %>% mutate(JSD = round(JSD, 3)) %>%
ggplot(aes(x = Simulation, y = Simulation_2, fill = JSD)) + geom_tile(width = 0.95, height = 0.95) +
scale_color_viridis_c() + labs(x = "", y = "") +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(filename = paste0(x, "_heatmap.pdf"), width = 5, height = 4)
ggsave(filename = paste0(x, "_heatmap.svg"), width = 5, height = 4)
print(d1)
setwd("..")
})
install.packages("svglite")
getwd("../..")
getwd()
setwd("..")
barsplots <- lapply(folz, function(x){#browser()
setwd(x)
df <- read.csv(paste0(x, "_summary.csv"))
df <- df[!str_detect(df$State, "NA"), ]
RACIPE100_cols <- colnames(df)[str_detect(colnames(df), "RACIPE_100")]
RACIPE1000_cols <- colnames(df)[str_detect(colnames(df), "RACIPE_1000")]
RACIPE100_cols <- RACIPE100_cols[!(RACIPE100_cols %in% RACIPE1000_cols)]
MAT100_cols <- colnames(df)[str_detect(colnames(df), "Matlab_100")]
MAT1000_cols <- colnames(df)[str_detect(colnames(df), "Matlab_1000")]
MAT100_cols <- MAT100_cols[!(MAT100_cols %in% MAT1000_cols)]
df <- df %>% mutate(
RACIPE100_Mean = df %>% select(RACIPE100_cols) %>% apply(1, mean),
RACIPE100_Sd = df %>% select(RACIPE100_cols) %>% apply(1, sd),
RACIPE1000_Mean = df %>% select(RACIPE1000_cols) %>% apply(1, mean),
RACIPE1000_Sd = df %>% select(RACIPE1000_cols) %>% apply(1, sd),
Matlab100_Mean = df %>% select(MAT100_cols) %>% apply(1, mean),
Matlab100_Sd = df %>% select(MAT100_cols) %>% apply(1, sd),
Matlab1000_Mean = df %>% select(MAT1000_cols) %>% apply(1, mean),
Matlab1000_Sd = df %>% select(MAT1000_cols) %>% apply(1, sd)
)
# df$St <- ifelse((length(df$State) > 30), (1:length(df$State)), df$State)
### barplot and heatmaps ----
if(nrow(df)>50)
{
df <- df[order(df$RACIPE100_Mean, decreasing = T), ]
df <- df[1:50,]
}
# browser()
df1 <- df %>% select(contains("Mean"), State) %>% gather(key = "Simulation", value = "Mean", -State)
df1$Simulation <- df1$Simulation %>% str_remove("_Mean")
df2 <- df %>% select(contains("Sd"), State) %>% gather(key = "Simulation", value = "Sd", -State)
df1$Sd <- df2$Sd
df1$St <- as.integer(df1$State)
State_code <- data.frame(State = as.character(df1$State), Code = as.integer(df1$State))
write.csv(State_code, paste0(x, "_State_reference.csv"), row.names = F)
p <- ggplot(df1, aes(x = reorder(St, -Mean), fill = Simulation, y = Mean)) +
geom_bar(position = position_dodge(), stat = "identity", colour = 'black') +
geom_errorbar(aes(ymin = Mean-Sd, ymax = Mean+Sd), width=.2,position=position_dodge(.9)) +
labs(x = "State", y = "Frequency") +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x, "_barplot.pdf"))
ggsave(filename = paste0(x, "_barplot.svg"))
print(p)
l <- unique(df1$Simulation)
for (i in 1:length(l))
{
for (j in (i+1):length(l))
{
p <- l[i]
q <- l[j]
d <- df1[df1$Simulation %in% c(p,q), ]
plt <- ggplot(d, aes(x = reorder(St, -Mean), fill = Simulation, y = Mean)) +
geom_bar(position = position_dodge(), stat = "identity", colour = 'black') +
geom_errorbar(aes(ymin = Mean-Sd, ymax = Mean+Sd), width=.2,position=position_dodge(.9)) +
labs(x = "State", y = "Frequency") +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x,p,q,"_barplot.pdf"))
ggsave(filename = paste0(x,p,q, "_barplot.svg"))
}
}
df$St <- as.integer(df$State)
p <- ggplot(df, aes(x = reorder(St, -RACIPE100_Mean), group = 1)) +
geom_line(aes(y = RACIPE100_Mean), colour = "Red") +
geom_errorbar(aes( ymin = RACIPE100_Mean - RACIPE100_Sd, ymax = RACIPE100_Mean + RACIPE100_Sd)) +
geom_line(aes(y = RACIPE1000_Mean), colour = "Red") +
geom_errorbar(aes( ymin = RACIPE1000_Mean - RACIPE1000_Sd, ymax = RACIPE1000_Mean + RACIPE1000_Sd)) +
geom_line(aes(y = Matlab100_Mean), colour = "Blue") +
geom_errorbar(aes(ymin = Matlab100_Mean - Matlab100_Sd, ymax = Matlab100_Mean + Matlab100_Sd)) +
geom_line(aes(y = Matlab1000_Mean), colour = "Green") +
geom_errorbar(aes(ymin = Matlab1000_Mean - Matlab1000_Sd, ymax = Matlab1000_Mean + Matlab1000_Sd)) +
labs(x = "State", y = "Frequency", title = x) + scale_x_log10() +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x, "_log_lineplot.pdf"), width = 4, height = 6)
ggsave(filename = paste0(x, "_log_lineplot.svg"), width = 4, height = 6)
print(p)
d1 <- df %>% select(RACIPE100_Mean, RACIPE1000_Mean, Matlab100_Mean, Matlab1000_Mean) %>%
t %>% JSD %>% data.frame %>% set_colnames(c("RACIPE100", "RACIPE1000", "Matlab100", "Matlab1000")) %>%
mutate(Simulation = c("RACIPE100", "RACIPE1000", "Matlab100", "Matlab1000")) %>%
gather(key = "Simulation_2", value = "JSD", -Simulation) %>% mutate(JSD = round(JSD, 3)) %>%
ggplot(aes(x = Simulation, y = Simulation_2, fill = JSD)) + geom_tile(width = 0.95, height = 0.95) +
scale_color_viridis_c() + labs(x = "", y = "") +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(filename = paste0(x, "_heatmap.pdf"), width = 5, height = 4)
ggsave(filename = paste0(x, "_heatmap.svg"), width = 5, height = 4)
print(d1)
setwd("..")
})
getwd()
setwd("..")
barsplots <- lapply(folz, function(x){#browser()
setwd(x)
df <- read.csv(paste0(x, "_summary.csv"))
df <- df[!str_detect(df$State, "NA"), ]
RACIPE100_cols <- colnames(df)[str_detect(colnames(df), "RACIPE_100")]
RACIPE1000_cols <- colnames(df)[str_detect(colnames(df), "RACIPE_1000")]
RACIPE100_cols <- RACIPE100_cols[!(RACIPE100_cols %in% RACIPE1000_cols)]
MAT100_cols <- colnames(df)[str_detect(colnames(df), "Matlab_100")]
MAT1000_cols <- colnames(df)[str_detect(colnames(df), "Matlab_1000")]
MAT100_cols <- MAT100_cols[!(MAT100_cols %in% MAT1000_cols)]
df <- df %>% mutate(
RACIPE100_Mean = df %>% select(RACIPE100_cols) %>% apply(1, mean),
RACIPE100_Sd = df %>% select(RACIPE100_cols) %>% apply(1, sd),
RACIPE1000_Mean = df %>% select(RACIPE1000_cols) %>% apply(1, mean),
RACIPE1000_Sd = df %>% select(RACIPE1000_cols) %>% apply(1, sd),
Matlab100_Mean = df %>% select(MAT100_cols) %>% apply(1, mean),
Matlab100_Sd = df %>% select(MAT100_cols) %>% apply(1, sd),
Matlab1000_Mean = df %>% select(MAT1000_cols) %>% apply(1, mean),
Matlab1000_Sd = df %>% select(MAT1000_cols) %>% apply(1, sd)
)
# df$St <- ifelse((length(df$State) > 30), (1:length(df$State)), df$State)
### barplot and heatmaps ----
if(nrow(df)>50)
{
df <- df[order(df$RACIPE100_Mean, decreasing = T), ]
df <- df[1:50,]
}
# browser()
df1 <- df %>% select(contains("Mean"), State) %>% gather(key = "Simulation", value = "Mean", -State)
df1$Simulation <- df1$Simulation %>% str_remove("_Mean")
df2 <- df %>% select(contains("Sd"), State) %>% gather(key = "Simulation", value = "Sd", -State)
df1$Sd <- df2$Sd
df1$St <- as.integer(df1$State)
State_code <- data.frame(State = as.character(df1$State), Code = as.integer(df1$State))
write.csv(State_code, paste0(x, "_State_reference.csv"), row.names = F)
p <- ggplot(df1, aes(x = reorder(St, -Mean), fill = Simulation, y = Mean)) +
geom_bar(position = position_dodge(), stat = "identity", colour = 'black') +
geom_errorbar(aes(ymin = Mean-Sd, ymax = Mean+Sd), width=.2,position=position_dodge(.9)) +
labs(x = "State", y = "Frequency") +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x, "_barplot.pdf"))
ggsave(filename = paste0(x, "_barplot.svg"))
print(p)
l <- unique(df1$Simulation)
for (i in 1:length(l))
{
for (j in (i+1):length(l))
{
p <- l[i]
q <- l[j]
d <- df1[df1$Simulation %in% c(p,q), ]
plt <- ggplot(d, aes(x = reorder(St, -Mean), fill = Simulation, y = Mean)) +
geom_bar(position = position_dodge(), stat = "identity", colour = 'black') +
geom_errorbar(aes(ymin = Mean-Sd, ymax = Mean+Sd), width=.2,position=position_dodge(.9)) +
labs(x = "State", y = "Frequency") +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x,p,q,"_barplot.pdf"))
ggsave(filename = paste0(x,p,q, "_barplot.svg"))
}
}
df$St <- as.integer(df$State)
p <- ggplot(df, aes(x = reorder(St, -RACIPE100_Mean), group = 1)) +
geom_line(aes(y = RACIPE100_Mean), colour = "Red") +
geom_errorbar(aes( ymin = RACIPE100_Mean - RACIPE100_Sd, ymax = RACIPE100_Mean + RACIPE100_Sd)) +
geom_line(aes(y = RACIPE1000_Mean), colour = "Red") +
geom_errorbar(aes( ymin = RACIPE1000_Mean - RACIPE1000_Sd, ymax = RACIPE1000_Mean + RACIPE1000_Sd)) +
geom_line(aes(y = Matlab100_Mean), colour = "Blue") +
geom_errorbar(aes(ymin = Matlab100_Mean - Matlab100_Sd, ymax = Matlab100_Mean + Matlab100_Sd)) +
geom_line(aes(y = Matlab1000_Mean), colour = "Green") +
geom_errorbar(aes(ymin = Matlab1000_Mean - Matlab1000_Sd, ymax = Matlab1000_Mean + Matlab1000_Sd)) +
labs(x = "State", y = "Frequency", title = x) +
theme_minimal() + theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold")) +
coord_flip()
ggsave(filename = paste0(x, "_log_lineplot.pdf"), width = 4, height = 6)
ggsave(filename = paste0(x, "_log_lineplot.svg"), width = 4, height = 6)
print(p)
d1 <- df %>% select(RACIPE100_Mean, RACIPE1000_Mean, Matlab100_Mean, Matlab1000_Mean) %>%
t %>% JSD %>% data.frame %>% set_colnames(c("RACIPE100", "RACIPE1000", "Matlab100", "Matlab1000")) %>%
mutate(Simulation = c("RACIPE100", "RACIPE1000", "Matlab100", "Matlab1000")) %>%
gather(key = "Simulation_2", value = "JSD", -Simulation) %>% mutate(JSD = round(JSD, 3)) %>%
ggplot(aes(x = Simulation, y = Simulation_2, fill = JSD)) + geom_tile(width = 0.95, height = 0.95) +
scale_color_viridis_c() + labs(x = "", y = "") +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(filename = paste0(x, "_heatmap.pdf"), width = 5, height = 4)
ggsave(filename = paste0(x, "_heatmap.svg"), width = 5, height = 4)
print(d1)
setwd("..")
})
volcs <- lapply(folz[2:3], function(x){#browser()
setwd(x)
df <- read.csv(paste0(x, "_summary.csv"))
df <- df[!str_detect(df$State, "NA"), ]
sims <- c("RACIPE_100", "RACIPE_1000", "Matlab_100", "Matlab_1000")
l1 <- list()
count <- 1
for (i in 1:(length(sims)-1))
for (j in (i+1):length(sims))
{
l1[[count]] <- sims[c(i,j)]
count <- count + 1
}
plotfunc <- lapply(l1, function(y){
d1 <- df %>% select(contains(y[1]), -contains(paste0(y[1], 0)))
d2 <- df %>% select(contains(y[2]), -contains(paste0(y[2], 0)))
d <- d1/d2
# d <- log(d)
pVec <- apply(d, 1, function(t){
p <- t.test(t-1)
p$p.value
})
mVec <- apply(d, 1, mean)
Frequency <- apply(d2, 1, mean)
plt <- ggplot() + geom_point(aes(x = mVec, y = log(pVec), color = Frequency), size = 2) +
geom_hline(yintercept = log(0.05), color = "red", size = 2)+ scale_color_viridis_c() +
labs(x = "Mean fold change", y = "log p-value") + theme_minimal() +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(paste0(x, paste0(y, collapse = "_"), "_volcano.svg"))
ggsave(paste0(x, paste0(y, collapse = "_"), "_volcano.pdf"))
})
setwd("..")
})
setwd("..")
getwd()
volcs <- lapply(folz[2:3], function(x){#browser()
setwd(x)
df <- read.csv(paste0(x, "_summary.csv"))
df <- df[!str_detect(df$State, "NA"), ]
sims <- c("RACIPE_100", "RACIPE_1000", "Matlab_100", "Matlab_1000")
l1 <- list()
count <- 1
for (i in 1:(length(sims)-1))
for (j in (i+1):length(sims))
{
l1[[count]] <- sims[c(i,j)]
count <- count + 1
}
plotfunc <- lapply(l1, function(y){
d1 <- df %>% select(contains(y[1]), -contains(paste0(y[1], 0)))
d2 <- df %>% select(contains(y[2]), -contains(paste0(y[2], 0)))
d <- d1/d2
d <- log(d)
pVec <- apply(d, 1, function(t){
p <- t.test(t-1)
p$p.value
})
mVec <- apply(d, 1, mean)
Frequency <- apply(d2, 1, mean)
plt <- ggplot() + geom_point(aes(x = mVec, y = pVec, color = Frequency), size = 2) +
geom_hline(yintercept = 0.05, color = "red", size = 2)+ scale_color_viridis_c() +
labs(x = "Mean log fold change", y = "log p-value") + theme_minimal() +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(paste0(x, paste0(y, collapse = "_"), "_volcano.svg"))
ggsave(paste0(x, paste0(y, collapse = "_"), "_volcano.pdf"))
})
setwd("..")
})
getwd()
setwd()
setwd("..")
volcs <- lapply(folz[2:3], function(x){#browser()
setwd(x)
df <- read.csv(paste0(x, "_summary.csv"))
df <- df[!str_detect(df$State, "NA"), ]
sims <- c("RACIPE_100", "RACIPE_1000", "Matlab_100", "Matlab_1000")
l1 <- list()
count <- 1
for (i in 1:(length(sims)-1))
for (j in (i+1):length(sims))
{
l1[[count]] <- sims[c(i,j)]
count <- count + 1
}
plotfunc <- lapply(l1, function(y){
d1 <- df %>% select(contains(y[1]), -contains(paste0(y[1], 0)))
d2 <- df %>% select(contains(y[2]), -contains(paste0(y[2], 0)))
d <- d1/d2
d <- log(d)
pVec <- apply(d, 1, function(t){
p <- t.test(t-1)
p$p.value
})
mVec <- apply(d, 1, mean)
Frequency <- apply(d2, 1, mean)
plt <- ggplot() + geom_point(aes(x = mVec, y = pVec, color = Frequency), size = 2) +
geom_hline(yintercept = 0.05, color = "red", size = 2)+ scale_color_viridis_c() +
labs(x = "Mean log fold change", y = "log p-value") + theme_minimal() +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(paste0(x, paste0(y, collapse = "_"), "_volcano.svg"))
ggsave(paste0(x, paste0(y, collapse = "_"), "_volcano.pdf"))
})
setwd("..")
})
volcs <- lapply(folz[2:3], function(x){#browser()
setwd(x)
df <- read.csv(paste0(x, "_summary.csv"))
df <- df[!str_detect(df$State, "NA"), ]
sims <- c("RACIPE_100", "RACIPE_1000", "Matlab_100", "Matlab_1000")
l1 <- list()
count <- 1
for (i in 1:(length(sims)-1))
for (j in (i+1):length(sims))
{
l1[[count]] <- sims[c(i,j)]
count <- count + 1
}
plotfunc <- lapply(l1, function(y){
d1 <- df %>% select(contains(y[1]), -contains(paste0(y[1], 0)))
d2 <- df %>% select(contains(y[2]), -contains(paste0(y[2], 0)))
d <- d1-d2
# d <- log(d)
pVec <- apply(d, 1, function(t){
p <- t.test(t-1)
p$p.value
})
mVec <- apply(d, 1, mean)
Frequency <- apply(d2, 1, mean)
plt <- ggplot() + geom_point(aes(x = mVec, y = pVec, color = Frequency), size = 2) +
geom_hline(yintercept = 0.05, color = "red", size = 2)+ scale_color_viridis_c() +
labs(x = "Mean log fold change", y = "log p-value") + theme_minimal() +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(paste0(x, paste0(y, collapse = "_"), "_diffvolcano.svg"))
ggsave(paste0(x, paste0(y, collapse = "_"), "_diffvolcano.pdf"))
})
setwd("..")
})
setwd("..")
volcs <- lapply(folz[2:3], function(x){#browser()
setwd(x)
df <- read.csv(paste0(x, "_summary.csv"))
df <- df[!str_detect(df$State, "NA"), ]
sims <- c("RACIPE_100", "RACIPE_1000", "Matlab_100", "Matlab_1000")
l1 <- list()
count <- 1
for (i in 1:(length(sims)-1))
for (j in (i+1):length(sims))
{
l1[[count]] <- sims[c(i,j)]
count <- count + 1
}
plotfunc <- lapply(l1, function(y){
d1 <- df %>% select(contains(y[1]), -contains(paste0(y[1], 0)))
d2 <- df %>% select(contains(y[2]), -contains(paste0(y[2], 0)))
d <- d1-d2
# d <- log(d)
pVec <- apply(d, 1, function(t){
p <- t.test(t-1)
p$p.value
})
mVec <- apply(d, 1, mean)
Frequency <- apply(d2, 1, mean)
plt <- ggplot() + geom_point(aes(x = mVec, y = pVec, color = Frequency), size = 2) +
geom_hline(yintercept = 0.05, color = "red", size = 2)+ scale_color_viridis_c() +
labs(x = "Mean log fold change", y = "log p-value") + theme_minimal() +
theme(axis.title = element_text(family = "sans", size = 20, face = "bold"),
legend.title = element_text(family = "sans", size = 20, face = "bold"),
legend.text = element_text(family = "sans", size = 15, face = "bold"),
axis.text.x = element_text(angle = 90, family = "sans", size = 15),
axis.text.y = element_text(family = "sans", size = 15))
ggsave(paste0(x, paste0(y, collapse = "_"), "_diffvolcano.svg"))
ggsave(paste0(x, paste0(y, collapse = "_"), "_diffvolcano.pdf"))
})
setwd("..")
})
