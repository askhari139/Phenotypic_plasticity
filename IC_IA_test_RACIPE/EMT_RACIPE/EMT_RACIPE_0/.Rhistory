else
{
setwd("..")
return(0)
}
df_list <- list(RACIPE = nfull, MAT100 = ss, MAT1000 = ss1000)
discrete_df_list <- lapply(names(df_list), function(n){#browser()
df1 <- df_list[[n]]
df1_z <- cbind.data.frame(df1$ParameterIndex, lapply(df1[, -1], zCal) %>% reduce(cbind.data.frame))
df1_d <- cbind.data.frame(PI = df1_z[[1]], lapply(df1_z[, -1], discretize) %>% reduce(cbind.data.frame))
df1_d <- df1_d[[1]] %>% table %>% data.frame %>% set_colnames(c("PI", "Count")) %>% merge(df1_d, by = "PI", all = T)
df1_d$Count <- 1/df1_d$Count
df1_f <- df1_d %>% select(-PI) %>% group_by_at(vars(-Count)) %>% summarise(Freq = sum(Count)/sum(df1_d$Count))
df1_f$State <- paste0(data.frame(t(df1_f[, 1:(ncol(df1_f)-1)])))
df1_f <- df1_f  %>% ungroup()%>% select(State, Freq)
if(nrow(df1_f) > 2000)
{
df1_f <- df1_f[which(df1_f$Freq > 0.1*(max(df1_f$Freq))),]
}
colnames(df1_f)[2] <- n
df1_f
}) %>% reduce(merge, by = "State", all= T)
# browser()
discrete_df_list[is.na(discrete_df_list)] <- 0
discrete_df_list <- discrete_df_list[order(discrete_df_list$RACIPE, decreasing = T),]
saveRDS(discrete_df_list, paste0(x, "_dfs.RDS"))
write.csv(discrete_df_list, paste0(x, "_summary.csv"), row.names = F)
setwd("..")
discrete_df_list
}) %>% reduce(merge, by = "State", all = T)
dat[is.na(dat)] <- 0
dat <- dat[order(dat$nfull, decreasing = T), ]
write.csv(dat, paste0(folder, "_summary.csv"))
setwd("..")
}
setwd("E:/Re-sims/Original")
dummy <- sapply(folz, mat_discret)
getwd()
setwd("EMT_RACIPE_0/")
df <- read.csv("EMT_RACIPE_0_summary.csv")
library(philentropy)
JSD(t(df[, 2:4]))
mat_discret <- function(folder)
{
setwd(folder)
folders <- paste0(folder, "_", 0:2)
dat <- sapply(folders, function(x){#browser()
setwd(x)
f <- list.files(".", "ss100.csv")
if (x != "EMT_RACIPE_1"){
if(!length(f)) {
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss.csv") %>% read.csv
ss1000 <- paste0(x, "_ss_1000.csv") %>% read.csv
topo_file <- paste0(x, ".topo")
topo <- read.delim(topo_file, sep = " ", stringsAsFactors = F)
if (ncol(topo) != 3)
topo <- read.delim(topo_file, sep = "\t", stringsAsFactors = F)
genes <- c(topo[[1]], topo[[2]]) %>% unique %>% str_replace_all("-", "")
colnames(nfull) <- colnames(nfull) %>% str_replace_all("-", "")
nfull[, -1] <- 2^nfull[, -1]
write.csv(nfull, paste0(x, "_RAC.csv"))
colnames(ss) <- c("ParameterIndex", genes)
ss <- ss %>% select(colnames(nfull))
write.csv(ss, paste0(x, "_ss100.csv"), row.names = F)
colnames(ss1000) <- c("ParameterIndex", genes)
ss1000 <- ss1000 %>% select(colnames(nfull))
write.csv(ss1000, paste0(x, "_ss1000.csv"), row.names = F)
}
else{
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss100.csv") %>% read.csv
ss1000 <- paste0(x, "_ss1000.csv") %>% read.csv
}
}
else
{
setwd("..")
return(0)
}
df_list <- list(RACIPE = nfull, MAT100 = ss, MAT1000 = ss1000)
discrete_df_list <- lapply(names(df_list), function(n){#browser()
df1 <- df_list[[n]]
df1_z <- cbind.data.frame(df1$ParameterIndex, lapply(df1[, -1], zCal) %>% reduce(cbind.data.frame))
df1_d <- cbind.data.frame(PI = df1_z[[1]], lapply(df1_z[, -1], discretize) %>% reduce(cbind.data.frame))
df1_d <- df1_d[[1]] %>% table %>% data.frame %>% set_colnames(c("PI", "Count")) %>% merge(df1_d, by = "PI", all = T)
df1_d$Count <- 1/df1_d$Count
df1_f <- df1_d %>% select(-PI) %>% group_by_at(vars(-Count)) %>% summarise(Freq = sum(Count)/sum(df1_d$Count))
df1_f$State <- paste0(data.frame(t(df1_f[, 1:(ncol(df1_f)-1)])))
df1_f <- df1_f  %>% ungroup()%>% select(State, Freq)
if(nrow(df1_f) > 2000)
{
df1_f <- df1_f[which(df1_f$Freq > 0.1*(max(df1_f$Freq))),]
}
colnames(df1_f)[2] <- n
df1_f
}) %>% reduce(merge, by = "State", all= T)
# browser()
discrete_df_list[is.na(discrete_df_list)] <- 0
discrete_df_list <- discrete_df_list[order(discrete_df_list$RACIPE, decreasing = T),]
saveRDS(discrete_df_list, paste0(x, "_dfs.RDS"))
write.csv(discrete_df_list, paste0(x, "_summary.csv"), row.names = F)
setwd("..")
discrete_df_list
}) %>% reduce(merge, by = "State", all = T)
dat[is.na(dat)] <- 0
dat <- dat[order(dat$nfull, decreasing = T), ]
write.csv(dat, paste0(folder, "_summary.csv"))
setwd("..")
}
getwd()
setwd("..")
setwd("..")
dummy <- sapply(folz, mat_discret)
mat_discret <- function(folder)
{
setwd(folder)
folders <- paste0(folder, "_", 0:2)
dat <- sapply(folders, function(x){#browser()
setwd(x)
f <- list.files(".", "ss100.csv")
if (x != "EMT_RACIPE_1"){
if(1) {
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss.csv") %>% read.csv
ss1000 <- paste0(x, "_ss_1000.csv") %>% read.csv
topo_file <- paste0(x, ".topo")
topo <- read.delim(topo_file, sep = " ", stringsAsFactors = F)
if (ncol(topo) != 3)
topo <- read.delim(topo_file, sep = "\t", stringsAsFactors = F)
genes <- c(topo[[1]], topo[[2]]) %>% unique %>% str_replace_all("-", "")
colnames(nfull) <- colnames(nfull) %>% str_replace_all("-", "")
nfull[, -1] <- 2^nfull[, -1]
write.csv(nfull, paste0(x, "_RAC.csv"))
colnames(ss) <- c("ParameterIndex", genes)
ss <- ss %>% select(colnames(nfull))
write.csv(ss, paste0(x, "_ss100.csv"), row.names = F)
colnames(ss1000) <- c("ParameterIndex", genes)
ss1000 <- ss1000 %>% select(colnames(nfull))
write.csv(ss1000, paste0(x, "_ss1000.csv"), row.names = F)
}
else{
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss100.csv") %>% read.csv
ss1000 <- paste0(x, "_ss1000.csv") %>% read.csv
}
}
else
{
setwd("..")
return(0)
}
df_list <- list(RACIPE = nfull, MAT100 = ss, MAT1000 = ss1000)
discrete_df_list <- lapply(names(df_list), function(n){#browser()
df1 <- df_list[[n]]
df1_z <- cbind.data.frame(df1$ParameterIndex, lapply(df1[, -1], zCal) %>% reduce(cbind.data.frame))
df1_d <- cbind.data.frame(PI = df1_z[[1]], lapply(df1_z[, -1], discretize) %>% reduce(cbind.data.frame))
df1_d <- df1_d[[1]] %>% table %>% data.frame %>% set_colnames(c("PI", "Count")) %>% merge(df1_d, by = "PI", all = T)
df1_d$Count <- 1/df1_d$Count
df1_f <- df1_d %>% select(-PI) %>% group_by_at(vars(-Count)) %>% summarise(Freq = sum(Count)/sum(df1_d$Count))
df1_f$State <- paste0(data.frame(t(df1_f[, 1:(ncol(df1_f)-1)])))
df1_f <- df1_f  %>% ungroup()%>% select(State, Freq)
if(nrow(df1_f) > 2000)
{
df1_f <- df1_f[which(df1_f$Freq > 0.1*(max(df1_f$Freq))),]
}
colnames(df1_f)[2] <- n
df1_f
}) %>% reduce(merge, by = "State", all= T)
# browser()
discrete_df_list[is.na(discrete_df_list)] <- 0
discrete_df_list <- discrete_df_list[order(discrete_df_list$RACIPE, decreasing = T),]
saveRDS(discrete_df_list, paste0(x, "_dfs.RDS"))
write.csv(discrete_df_list, paste0(x, "_summary.csv"), row.names = F)
setwd("..")
discrete_df_list
}) %>% reduce(merge, by = "State", all = T)
dat[is.na(dat)] <- 0
dat <- dat[order(dat$nfull, decreasing = T), ]
write.csv(dat, paste0(folder, "_summary.csv"))
setwd("..")
}
setwd("..")
dummy <- sapply(folz, mat_discret)
setwd("../../")
dummy <- sapply(folz, mat_discret)
2 + 1:5
gknorm <- function(folder, df){
pars <- paste0(folder, "_parameters.dat") %>% read.delim
pars <- pars[, 3:ncol(pars)]
ngene <- ncol(df)-1
prods <- pars[, 1:ngene]
degs <- pars[, (ngene + (1:ngene))]
norm <- prod/deg
df[, -1] <- df[, -1]/norm
df
}
zCal <- function(x){
x <- log2(x)
M <- mean(x, na.rm = T)
S <- sd(x, na.rm = T)
(x-M)/S
}
gknorm <- function(df, folder){
pars <- paste0(folder, "_parameters.dat") %>% read.delim
pars <- pars[, 3:ncol(pars)]
ngene <- ncol(df)-1
prods <- pars[, 1:ngene]
degs <- pars[, (ngene + (1:ngene))]
norm <- prod/deg
df[, -1] <- df[, -1]/norm
df
}
mat_discret <- function(folder)
{
setwd(folder)
folders <- paste0(folder, "_", 0:2)
dat <- sapply(folders, function(x){#browser()
setwd(x)
f <- list.files(".", "ss100.csv")
if (x != "EMT_RACIPE_1"){
if(1) {
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss.csv") %>% read.csv
ss1000 <- paste0(x, "_ss_1000.csv") %>% read.csv
topo_file <- paste0(x, ".topo")
topo <- read.delim(topo_file, sep = " ", stringsAsFactors = F)
if (ncol(topo) != 3)
topo <- read.delim(topo_file, sep = "\t", stringsAsFactors = F)
genes <- c(topo[[1]], topo[[2]]) %>% unique %>% str_replace_all("-", "")
colnames(nfull) <- colnames(nfull) %>% str_replace_all("-", "")
nfull[, -1] <- 2^nfull[, -1]
write.csv(nfull, paste0(x, "_RAC.csv"), row.names = F)
colnames(ss) <- c("ParameterIndex", genes)
ss <- ss %>% select(colnames(nfull))
write.csv(ss, paste0(x, "_ss100.csv"), row.names = F)
colnames(ss1000) <- c("ParameterIndex", genes)
ss1000 <- ss1000 %>% select(colnames(nfull))
write.csv(ss1000, paste0(x, "_ss1000.csv"), row.names = F)
}
else{
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss100.csv") %>% read.csv
ss1000 <- paste0(x, "_ss1000.csv") %>% read.csv
}
}
else
{
setwd("..")
return(0)
}
df_list <- list(RACIPE = nfull, MAT100 = ss, MAT1000 = ss1000)
discrete_df_list <- lapply(names(df_list), function(n){browser()
df1 <- df_list[[n]] %>% gknorm(x)
df1_z <- cbind.data.frame(df1$ParameterIndex, lapply(df1[, -1], zCal) %>% reduce(cbind.data.frame))
df1_d <- cbind.data.frame(PI = df1_z[[1]], lapply(df1_z[, -1], discretize) %>% reduce(cbind.data.frame))
df1_d <- df1_d[[1]] %>% table %>% data.frame %>% set_colnames(c("PI", "Count")) %>% merge(df1_d, by = "PI", all = T)
df1_d$Count <- 1/df1_d$Count
df1_f <- df1_d %>% select(-PI) %>% group_by_at(vars(-Count)) %>% summarise(Freq = sum(Count)/sum(df1_d$Count))
df1_f$State <- paste0(data.frame(t(df1_f[, 1:(ncol(df1_f)-1)])))
df1_f <- df1_f  %>% ungroup()%>% select(State, Freq)
if(nrow(df1_f) > 2000)
{
df1_f <- df1_f[which(df1_f$Freq > 0.1*(max(df1_f$Freq))),]
}
colnames(df1_f)[2] <- n
df1_f
}) %>% reduce(merge, by = "State", all= T)
# browser()
discrete_df_list[is.na(discrete_df_list)] <- 0
discrete_df_list <- discrete_df_list[order(discrete_df_list$RACIPE, decreasing = T),]
saveRDS(discrete_df_list, paste0(x, "_dfs.RDS"))
write.csv(discrete_df_list, paste0(x, "_summary.csv"), row.names = F)
setwd("..")
discrete_df_list
}) %>% reduce(merge, by = "State", all = T)
dat[is.na(dat)] <- 0
dat <- dat[order(dat$nfull, decreasing = T), ]
write.csv(dat, paste0(folder, "_summary.csv"))
setwd("..")
}
getwd()
setwd("..")
dummy <- sapply(folz, mat_discret)
setwd("../../")
dummy <- sapply(folz, mat_discret)
df <- df_list[[n]]
df1 <- df_list[[n]] %>% gknorm(x)
gknorm <- function(df, folder){
pars <- paste0(folder, "_parameters.dat") %>% read.delim
pars <- pars[, 3:ncol(pars)]
ngene <- ncol(df)-1
prods <- pars[, 1:ngene]
degs <- pars[, (ngene + (1:ngene))]
norm <- prod/degs
df[, -1] <- df[, -1]/norm
df
}
df1 <- df_list[[n]] %>% gknorm(x)
df1 <- gknorm(df_list[[n]], folder)
df1 <- gknorm(df_list[[n]], x)
gknorm <- function(df, folder){browser()
pars <- paste0(folder, "_parameters.dat") %>% read.delim
pars <- pars[, 3:ncol(pars)]
ngene <- ncol(df)-1
prods <- pars[, 1:ngene]
degs <- pars[, (ngene + (1:ngene))]
norm <- prod/degs
df[, -1] <- df[, -1]/norm
df
}
df1 <- gknorm(df_list[[n]], x)
View(df)
df1 <- gknorm(df_list[[n]], x)
norm <- prods/degs
gknorm <- function(df, folder){#browser()
pars <- paste0(folder, "_parameters.dat") %>% read.delim
pars <- pars[, 3:ncol(pars)]
ngene <- ncol(df)-1
prods <- pars[, 1:ngene]
degs <- pars[, (ngene + (1:ngene))]
norm <- prods/degs
df[, -1] <- df[, -1]/norm
df
}
mat_discret <- function(folder)
{
setwd(folder)
folders <- paste0(folder, "_", 0:2)
dat <- sapply(folders, function(x){#browser()
setwd(x)
f <- list.files(".", "ss100.csv")
if (x != "EMT_RACIPE_1"){
if(1) {
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss.csv") %>% read.csv
ss1000 <- paste0(x, "_ss_1000.csv") %>% read.csv
topo_file <- paste0(x, ".topo")
topo <- read.delim(topo_file, sep = " ", stringsAsFactors = F)
if (ncol(topo) != 3)
topo <- read.delim(topo_file, sep = "\t", stringsAsFactors = F)
genes <- c(topo[[1]], topo[[2]]) %>% unique %>% str_replace_all("-", "")
colnames(nfull) <- colnames(nfull) %>% str_replace_all("-", "")
nfull[, -1] <- 2^nfull[, -1]
write.csv(nfull, paste0(x, "_RAC.csv"), row.names = F)
colnames(ss) <- c("ParameterIndex", genes)
ss <- ss %>% select(colnames(nfull))
write.csv(ss, paste0(x, "_ss100.csv"), row.names = F)
colnames(ss1000) <- c("ParameterIndex", genes)
ss1000 <- ss1000 %>% select(colnames(nfull))
write.csv(ss1000, paste0(x, "_ss1000.csv"), row.names = F)
}
else{
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss100.csv") %>% read.csv
ss1000 <- paste0(x, "_ss1000.csv") %>% read.csv
}
}
else
{
setwd("..")
return(0)
}
df_list <- list(RACIPE = nfull, MAT100 = ss, MAT1000 = ss1000)
discrete_df_list <- lapply(names(df_list), function(n){browser()
df1 <- gknorm(df_list[[n]], x)
df1_z <- cbind.data.frame(df1$ParameterIndex, lapply(df1[, -1], zCal) %>% reduce(cbind.data.frame))
df1_d <- cbind.data.frame(PI = df1_z[[1]], lapply(df1_z[, -1], discretize) %>% reduce(cbind.data.frame))
df1_d <- df1_d[[1]] %>% table %>% data.frame %>% set_colnames(c("PI", "Count")) %>% merge(df1_d, by = "PI", all = T)
df1_d$Count <- 1/df1_d$Count
df1_f <- df1_d %>% select(-PI) %>% group_by_at(vars(-Count)) %>% summarise(Freq = sum(Count)/sum(df1_d$Count))
df1_f$State <- paste0(data.frame(t(df1_f[, 1:(ncol(df1_f)-1)])))
df1_f <- df1_f  %>% ungroup()%>% select(State, Freq)
if(nrow(df1_f) > 2000)
{
df1_f <- df1_f[which(df1_f$Freq > 0.1*(max(df1_f$Freq))),]
}
colnames(df1_f)[2] <- n
df1_f
}) %>% reduce(merge, by = "State", all= T)
# browser()
discrete_df_list[is.na(discrete_df_list)] <- 0
discrete_df_list <- discrete_df_list[order(discrete_df_list$RACIPE, decreasing = T),]
saveRDS(discrete_df_list, paste0(x, "_dfs.RDS"))
write.csv(discrete_df_list, paste0(x, "_summary.csv"), row.names = F)
setwd("..")
discrete_df_list
}) %>% reduce(merge, by = "State", all = T)
dat[is.na(dat)] <- 0
dat <- dat[order(dat$nfull, decreasing = T), ]
write.csv(dat, paste0(folder, "_summary.csv"))
setwd("..")
}
setwd("E:/Re-sims/Original")
folz <- list.dirs(".", recursive = F) %>% str_remove("./")
folz <- folz[-which(folz == "RACIPE")]
dummy <- sapply(folz, mat_discret)
df <- df_list[[n]]
df1 <- gknorm(df_list[[n]], x)
gknorm <- function(df, folder){browser()
pars <- paste0(folder, "_parameters.dat") %>% read.delim
pars <- pars[, 3:ncol(pars)]
ngene <- ncol(df)-1
prods <- pars[, 1:ngene]
degs <- pars[, (ngene + (1:ngene))]
norm <- prods/degs
df[, -1] <- df[, -1]/norm
df
}
df1 <- gknorm(df_list[[n]], x)
colnames(df)
norm <- cbind.data.frame(ParameterIndex = 1:nrow(norm), norm) %>%
merge(select(df, ParameterIndex), by = "ParameterIndex", all = T)
df[, -1] <- df[, -1]/norm
norm <- cbind.data.frame(ParameterIndex = 1:nrow(norm), norm) %>%
merge(select(df, ParameterIndex), by = "ParameterIndex", all = T) %>% select(-ParameterIndex)
norm <- prods/degs
norm <- cbind.data.frame(ParameterIndex = 1:nrow(norm), norm) %>%
merge(select(df, ParameterIndex), by = "ParameterIndex", all = T) %>% select(-ParameterIndex)
df[, -1] <- df[, -1]/norm
gknorm <- function(df, folder){#browser()
pars <- paste0(folder, "_parameters.dat") %>% read.delim
pars <- pars[, 3:ncol(pars)]
ngene <- ncol(df)-1
prods <- pars[, 1:ngene]
degs <- pars[, (ngene + (1:ngene))]
norm <- prods/degs
norm <- cbind.data.frame(ParameterIndex = 1:nrow(norm), norm) %>%
merge(select(df, ParameterIndex), by = "ParameterIndex", all = T) %>% select(-ParameterIndex)
df[, -1] <- df[, -1]/norm
df
}
mat_discret <- function(folder)
{
setwd(folder)
folders <- paste0(folder, "_", 0:2)
dat <- sapply(folders, function(x){#browser()
setwd(x)
f <- list.files(".", "ss100.csv")
if (x != "EMT_RACIPE_1"){
if(1) {
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss.csv") %>% read.csv
ss1000 <- paste0(x, "_ss_1000.csv") %>% read.csv
topo_file <- paste0(x, ".topo")
topo <- read.delim(topo_file, sep = " ", stringsAsFactors = F)
if (ncol(topo) != 3)
topo <- read.delim(topo_file, sep = "\t", stringsAsFactors = F)
genes <- c(topo[[1]], topo[[2]]) %>% unique %>% str_replace_all("-", "")
colnames(nfull) <- colnames(nfull) %>% str_replace_all("-", "")
nfull[, -1] <- 2^nfull[, -1]
write.csv(nfull, paste0(x, "_RAC.csv"), row.names = F)
colnames(ss) <- c("ParameterIndex", genes)
ss <- ss %>% select(colnames(nfull))
write.csv(ss, paste0(x, "_ss100.csv"), row.names = F)
colnames(ss1000) <- c("ParameterIndex", genes)
ss1000 <- ss1000 %>% select(colnames(nfull))
write.csv(ss1000, paste0(x, "_ss1000.csv"), row.names = F)
}
else{
nfull <- paste0(x, "_nfull_mat.csv") %>% read.csv
ss <- paste0(x, "_ss100.csv") %>% read.csv
ss1000 <- paste0(x, "_ss1000.csv") %>% read.csv
}
}
else
{
setwd("..")
return(0)
}
df_list <- list(RACIPE = nfull, MAT100 = ss, MAT1000 = ss1000)
discrete_df_list <- lapply(names(df_list), function(n){browser()
df1 <- gknorm(df_list[[n]], x)
df1_z <- cbind.data.frame(df1$ParameterIndex, lapply(df1[, -1], zCal) %>% reduce(cbind.data.frame))
df1_d <- cbind.data.frame(PI = df1_z[[1]], lapply(df1_z[, -1], discretize) %>% reduce(cbind.data.frame))
df1_d <- df1_d[[1]] %>% table %>% data.frame %>% set_colnames(c("PI", "Count")) %>% merge(df1_d, by = "PI", all = T)
df1_d$Count <- 1/df1_d$Count
df1_f <- df1_d %>% select(-PI) %>% group_by_at(vars(-Count)) %>% summarise(Freq = sum(Count)/sum(df1_d$Count))
df1_f$State <- paste0(data.frame(t(df1_f[, 1:(ncol(df1_f)-1)])))
df1_f <- df1_f  %>% ungroup()%>% select(State, Freq)
if(nrow(df1_f) > 2000)
{
df1_f <- df1_f[which(df1_f$Freq > 0.1*(max(df1_f$Freq))),]
}
colnames(df1_f)[2] <- n
df1_f
}) %>% reduce(merge, by = "State", all= T)
# browser()
discrete_df_list[is.na(discrete_df_list)] <- 0
discrete_df_list <- discrete_df_list[order(discrete_df_list$RACIPE, decreasing = T),]
saveRDS(discrete_df_list, paste0(x, "_dfs.RDS"))
write.csv(discrete_df_list, paste0(x, "_summary.csv"), row.names = F)
setwd("..")
discrete_df_list
}) %>% reduce(merge, by = "State", all = T)
dat[is.na(dat)] <- 0
dat <- dat[order(dat$nfull, decreasing = T), ]
write.csv(dat, paste0(folder, "_summary.csv"))
setwd("..")
}
setwd("E:/Re-sims/Original")
folz <- list.dirs(".", recursive = F) %>% str_remove("./")
folz <- folz[-which(folz == "RACIPE")]
dummy <- sapply(folz, mat_discret)
df <- df_list[[n]]
df1 <- gknorm(df_list[[n]], x)
View(df1)
View(df)
df1_z <- cbind.data.frame(df1$ParameterIndex, lapply(df1[, -1], zCal) %>% reduce(cbind.data.frame))
df1_d <- cbind.data.frame(PI = df1_z[[1]], lapply(df1_z[, -1], discretize) %>% reduce(cbind.data.frame))
df1_d <- df1_d[[1]] %>% table %>% data.frame %>% set_colnames(c("PI", "Count")) %>% merge(df1_d, by = "PI", all = T)
df1_d$Count <- 1/df1_d$Count
